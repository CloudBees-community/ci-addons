################################################################################
#  Copyright 2010-2011 CloudBees Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
################################################################################
# To call this script: 
#   bash < <(curl -s https://repository-cloudbees.forge.cloudbees.com/distributions/ci-addons/postgresql/run-addon)

set -eu

if [ "${WORKSPACE:-notset}" == "notset" ]; then
  echo '$WORKSPACE is not set'
  exit 1
fi

VERSION=0.1
PGVERSION=${PGVERSION:-9.0.4}
ARCH=`uname -i`
# To make matrix builds work, we need to hardwire the workspace
ROOT_WORKSPACE=/scratch/hudson/workspace
PGNAME=postgresql-${PGVERSION}-${ARCH}
PGHOME=${ROOT_WORKSPACE}/postgresql/${PGNAME}
PGPORT=${PGPORT:-5432}
# Create your database in
# /tmp/postgresql-data       for transient data - default
# $WORKSPACE/postgresql-data for persisted data
PGDATA=${PGDATA:-/tmp/postgresql-data}

echo '##########################################################'
echo "# CloudBees CI PostgreSQL Add-on ${VERSION}"
echo "# Version:      ${PGVERSION}"
echo "# Home:         ${PGHOME}"
echo "# Port:         ${PGPORT}"
echo "# Architecture: ${ARCH}"
echo "# Data:         ${PGDATA}"

if [ ! -f $PGHOME/bin/psql ];then
  echo PostgreSQL is not installed, and this is not the master job for creating the install
  echo please create a "postgresql" job and rerun the install
  exit 1
fi

################################################################################
# Now start the database
# You _may_ need to copy the PATH, PGDATA, LD_LIBRARY_PATH settings to your
#  own build script
################################################################################
export PATH=${PGHOME}/bin:${PATH}
export LD_LIBRARY_PATH=${PGHOME}/lib:${LD_LIBRARY_PATH:-}
export PGDATA

if [ ! -d ${PGDATA} ]; then
  echo "# Initialising database in ${PGDATA}"
  initdb > /dev/null
  # Change security config if required (e.g. pg_hba.conf)
else
  echo "# Using database in ${PGDATA}"
fi

if [ -f ${PGDATA}/postmaster.pid ]; then 
  echo "# Using existing PostgreSQL engine"
else
  echo "# Starting new PostgreSQL engine"
  pg_ctl -D ${PGDATA} -l ${WORKSPACE}/postgres.log start
  echo "# Having a nap to give the server time to start listening"
  sleep 10
fi

echo '##########################################################'
echo '# Set the following in your environment for actual builds:'
echo "PGHOME=${ROOT_WORKSPACE}/postgresql/${PGNAME}"
echo "PGPORT=${PGPORT}"
echo "PGDATA=${PGDATA}"
echo 'PATH=${PGHOME}/bin:${PATH}'
echo 'LD_LIBRARY_PATH=${PGHOME}/lib:${LD_LIBRARY_PATH:-}'
echo '##########################################################'
